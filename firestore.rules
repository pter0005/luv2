/**
 * @file Firestore Security Rules for Amore Pages
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles and LovePages,
 * ensuring that only authenticated users can access and modify their own data. Templates are publicly
 * readable, but write access is not granted via these rules.
 *
 * @data_structure The data is organized hierarchically:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/love_pages/{lovePageId}: Stores love pages created by users.
 * - /templates/{templateId}: Stores pre-designed templates.
 *
 * @key_security_decisions
 * - Users can only create, update, or delete their own profile data and LovePages.
 * - Listing LovePages is restricted to the owner of the pages.
 * - Templates are publicly readable.
 * - Data validation is limited to ownership checks and relational integrity (e.g., userId consistency).
 *
 * @denormalization For authorization independence, LovePages store the `userId` of the creating user within each document.
 * This allows security rules to validate ownership without requiring additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' creates their profile at /users/user_abc.
     * @deny (create) User with UID 'user_xyz' attempts to create a profile at /users/user_abc.
     * @allow (get) User with UID 'user_abc' reads their profile at /users/user_abc.
     * @deny (get) User with UID 'user_xyz' attempts to read the profile at /users/user_abc.
     * @allow (update) User with UID 'user_abc' updates their profile at /users/user_abc.
     * @deny (update) User with UID 'user_xyz' attempts to update the profile at /users/user_abc.
     * @allow (delete) User with UID 'user_abc' deletes their profile at /users/user_abc.
     * @deny (delete) User with UID 'user_xyz' attempts to delete the profile at /users/user_abc.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the resource.
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to love page data for a specific user.
     * @path /users/{userId}/love_pages/{lovePageId}
     * @allow (create) User with UID 'user_abc' creates a love page at /users/user_abc/love_pages/page_123.
     * @deny (create) User with UID 'user_xyz' attempts to create a love page at /users/user_abc/love_pages/page_123.
     * @allow (get) User with UID 'user_abc' reads their love page at /users/user_abc/love_pages/page_123.
     * @deny (get) User with UID 'user_xyz' attempts to read the love page at /users/user_abc/love_pages/page_123.
     * @allow (update) User with UID 'user_abc' updates their love page at /users/user_abc/love_pages/page_123.
     * @deny (update) User with UID 'user_xyz' attempts to update the love page at /users/user_abc/love_pages/page_123.
     * @allow (delete) User with UID 'user_abc' deletes their love page at /users/user_abc/love_pages/page_123.
     * @deny (delete) User with UID 'user_xyz' attempts to delete the love page at /users/user_abc/love_pages/page_123.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/love_pages/{lovePageId} {
       // Helper function to check if the user is signed in and owns the resource.
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to pre-designed templates.
     * @path /templates/{templateId}
     * @allow (get) Any user can retrieve a template.
     * @allow (list) Any user can list templates.
     * @deny (create) No user can create templates through client-side rules.
     * @deny (update) No user can update templates through client-side rules.
     * @deny (delete) No user can delete templates through client-side rules.
     * @principle Templates are publicly readable, but write access is not granted via these rules.
     */
    match /templates/{templateId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}